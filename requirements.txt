# ====================================================================
# FACE RECOGNITION ATTENDANCE SYSTEM - COMPLETE REQUIREMENTS
# ====================================================================
# This file contains all dependencies for both the original script 
# and the new FastAPI web application
# ====================================================================

# ====================================================================
# WEB FRAMEWORK AND API DEPENDENCIES
# ====================================================================

# FastAPI - Modern, fast web framework for building APIs
fastapi>=0.104.1

# ASGI server for running FastAPI applications
uvicorn[standard]>=0.24.0

# File upload handling for FastAPI
python-multipart>=0.0.6

# CORS middleware support
# (included with FastAPI, but listing for clarity)

# ====================================================================
# CORE FACE RECOGNITION DEPENDENCIES
# ====================================================================

# Face detection and recognition library
face-recognition>=1.3.0          

# NOTE: face-recognition automatically installs:
# - face-recognition-models>=0.3.0
# - dlib (but you may need to install via conda: conda install -c conda-forge dlib)

# Numerical computations (matrix operations, linear algebra)
numpy>=1.21.6                    # Compatible with face-recognition

# Image processing (opening, editing, converting images)
Pillow>=9.5.0                    # Updated for security fixes

# Computer vision library (image/video reading, processing)
opencv-python>=4.5.5.64          # Stable version compatible with face-recognition

# ====================================================================
# VIDEO AND MEDIA HANDLING
# ====================================================================

# Python library for video editing (cuts, concatenation, effects)
moviepy>=1.0.3                   

# Provides FFMPEG support for moviepy (handling video/audio codecs)
imageio-ffmpeg>=0.4.5            

# Image input/output library (reading/writing different image formats)
imageio>=2.19.0                  

# Progress bar for long-running tasks (used in moviepy, training, etc.)
tqdm>=4.64.0                     

# Logging utility for moviepy (displays progress & debugging info)
proglog>=0.1.10                  

# ====================================================================
# UTILITY LIBRARIES
# ====================================================================

# Command-line utility helper
click>=8.1.0                     

# Function decorator utilities
decorator>=5.1.0                 

# ====================================================================
# NETWORKING / HTTP REQUESTS
# ====================================================================

# HTTP requests made simple
requests>=2.28.0                 # Updated for security

# Support library for handling internationalized domain names
idna>=3.4                        

# URL handling and connection pooling
urllib3>=1.26.12                 # Updated for security

# Character encoding detection (used by requests)
chardet>=5.0.0                   

# Root certificates for HTTPS validation
certifi>=2022.12.7               

# Windows-specific certificate handling (only needed on Windows)
wincertstore>=0.2; sys_platform == "win32"

# ====================================================================
# AUTHENTICATION AND SECURITY (Optional - for future features)
# ====================================================================

# JSON Web Token support
python-jose[cryptography]==3.3.0

# Password hashing utilities
passlib[bcrypt]==1.7.4

# ====================================================================
# DATA VALIDATION AND SERIALIZATION
# ====================================================================

# Data validation library (used by FastAPI)
pydantic>=2.0.0

# ====================================================================
# PERFORMANCE OPTIMIZATIONS (Optional)
# ====================================================================

# Fast JSON library (can provide performance boost)
orjson>=3.8.0

# ====================================================================
# DEVELOPMENT AND DEBUGGING (Optional)
# ====================================================================

# Interactive Python shell (useful for debugging)
ipython>=8.5.0

# System and process utilities
psutil>=5.9.0

# ====================================================================
# INSTALLATION NOTES
# ====================================================================

# IMPORTANT: dlib Installation
# ----------------------------
# dlib can be challenging to install on some systems.
# 
# Option 1 - Using conda (RECOMMENDED):
# conda install -c conda-forge dlib
# pip install -r requirements.txt
#
# Option 2 - Using pip with pre-compiled wheels:
# pip install --upgrade pip
# pip install dlib
# pip install -r requirements.txt
#
# Option 3 - Building from source (requires CMake):
# Install Visual Studio Build Tools (Windows) or build-essential (Linux)
# pip install cmake
# pip install dlib
# pip install -r requirements.txt

# DOCKER INSTALLATION
# -------------------
# When using Docker, dlib installation is handled in the Dockerfile
# with proper system dependencies and compilation tools.

# VIRTUAL ENVIRONMENT SETUP
# -------------------------
# python -m venv face_recognition_env
# source face_recognition_env/bin/activate  # Linux/Mac
# # OR
# face_recognition_env\Scripts\activate     # Windows
# pip install --upgrade pip setuptools wheel
# pip install -r requirements.txt

# CONDA ENVIRONMENT SETUP (ALTERNATIVE)
# -------------------------------------
# conda create -n face_recognition_env python=3.9
# conda activate face_recognition_env
# conda install -c conda-forge dlib
# pip install -r requirements.txt

# SYSTEM DEPENDENCIES (Linux)
# ---------------------------
# sudo apt-get update
# sudo apt-get install -y python3-dev cmake build-essential
# sudo apt-get install -y libopencv-dev python3-opencv
# sudo apt-get install -y libjpeg-dev libpng-dev libtiff-dev
# sudo apt-get install -y libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
# sudo apt-get install -y libxvidcore-dev libx264-dev libgtk-3-dev
# sudo apt-get install -y libatlas-base-dev gfortran

# SYSTEM DEPENDENCIES (macOS)
# ---------------------------
# brew install cmake
# brew install opencv

# SYSTEM DEPENDENCIES (Windows)
# -----------------------------
# Install Visual Studio Build Tools or Visual Studio Community
# Install CMake from https://cmake.org/download/

# TROUBLESHOOTING
# --------------
# 1. If face_recognition fails to install:
#    - Try installing dlib separately first
#    - Use conda instead of pip for dlib
#    - Ensure you have proper build tools installed
#
# 2. If OpenCV fails to access camera:
#    - Check camera permissions
#    - Try different camera indices (0, 1, 2, etc.)
#    - Install v4l-utils on Linux: sudo apt-get install v4l-utils
#
# 3. If FastAPI server fails to start:
#    - Check if port 8000 is already in use
#    - Try running with: uvicorn app:app --host 0.0.0.0 --port 8001
#
# 4. Memory issues during recognition:
#    - Reduce image resolution in the recognition loop
#    - Limit the number of concurrent face encodings
#    - Consider using a GPU for faster processing

# PRODUCTION DEPLOYMENT
# ---------------------
# For production deployment, consider:
# - Using gunicorn with uvicorn workers
# - Setting up proper logging
# - Using environment variables for configuration
# - Implementing proper error handling and monitoring
# - Using a reverse proxy (nginx) for better performance
# - Setting up SSL/TLS certificates for HTTPS

# Example production command:
# gunicorn app:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000