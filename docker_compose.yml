# ====================================================================
# DOCKER COMPOSE CONFIGURATION
# Face Recognition Attendance System
# ====================================================================
# Multi-service deployment configuration with optional services
# ====================================================================

version: '3.8'

services:
  # ====================================================================
  # MAIN APPLICATION SERVICE
  # ====================================================================
  
  face-recognition-app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    
    image: face-recognition-attendance:latest
    container_name: face-recognition-attendance
    
    # Restart policy
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "8000:8000"
    
    # Environment variables
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - IMAGES_FOLDER=student-images
      - ATTENDANCE_FILE=attendance.json
      - LOG_LEVEL=info
      - WORKERS=1
    
    # Volume mounts for persistent data
    volumes:
      # Student images (persistent)
      - ./student-images:/app/student-images
      # Attendance data (persistent)  
      - ./attendance.json:/app/attendance.json
      # Application logs
      - ./logs:/app/logs
      # Optional: Mount source code for development
      # - ./app.py:/app/app.py
      # - ./face_recognition_module.py:/app/face_recognition_module.py
      # - ./static:/app/static
    
    # Camera device access (Linux only)
    devices:
      - /dev/video0:/dev/video0
    
    # Network configuration
    networks:
      - face-recognition-network
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    # Health check
    healthcheck:
      test: ["CMD", "python3", "/tmp/health_check.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Dependencies
    depends_on:
      - redis
      - postgres
    
    # Labels for organization
    labels:
      - "project=face-recognition-attendance"
      - "service=web-app"
      - "environment=production"

  # ====================================================================
  # REDIS SERVICE (Optional - for caching and session management)
  # ====================================================================
  
  redis:
    image: redis:7-alpine
    container_name: face-recognition-redis
    restart: unless-stopped
    
    # Port mapping (optional, for external access)
    ports:
      - "6379:6379"
    
    # Configuration
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    # Volume for persistent data
    volumes:
      - redis-data:/data
    
    # Network
    networks:
      - face-recognition-network
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 300M
          cpus: '0.5'
        reservations:
          memory: 50M
          cpus: '0.1'
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    
    labels:
      - "project=face-recognition-attendance"
      - "service=cache"

  # ====================================================================
  # POSTGRESQL SERVICE (Optional - for advanced data storage)
  # ====================================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: face-recognition-postgres
    restart: unless-stopped
    
    # Environment variables
    environment:
      POSTGRES_DB: face_recognition_db
      POSTGRES_USER: face_recognition_user
      POSTGRES_PASSWORD: secure_password_change_this
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    
    # Port mapping (optional, for external access)
    ports:
      - "5432:5432"
    
    # Volume for persistent data
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # Optional: Initialize database with schema
      # - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    
    # Network
    networks:
      - face-recognition-network
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 100M
          cpus: '0.2'
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U face_recognition_user -d face_recognition_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    labels:
      - "project=face-recognition-attendance"
      - "service=database"

  # ====================================================================
  # NGINX SERVICE (Optional - reverse proxy and load balancer)
  # ====================================================================
  
  nginx:
    image: nginx:alpine
    container_name: face-recognition-nginx
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "80:80"
      - "443:443"
    
    # Configuration
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    
    # Network
    networks:
      - face-recognition-network
    
    # Dependencies
    depends_on:
      - face-recognition-app
    
    labels:
      - "project=face-recognition-attendance"
      - "service=reverse-proxy"

  # ====================================================================
  # MONITORING SERVICE (Optional - Prometheus for metrics)
  # ====================================================================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: face-recognition-prometheus
    restart: unless-stopped
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    networks:
      - face-recognition-network
    
    labels:
      - "project=face-recognition-attendance"
      - "service=monitoring"

# ====================================================================
# NETWORKS
# ====================================================================

networks:
  face-recognition-network:
    driver: bridge
    name: face-recognition-network
    labels:
      - "project=face-recognition-attendance"

# ====================================================================
# VOLUMES
# ====================================================================

volumes:
  # Redis data persistence
  redis-data:
    name: face-recognition-redis-data
    labels:
      - "project=face-recognition-attendance"
      - "type=cache-data"
  
  # PostgreSQL data persistence
  postgres-data:
    name: face-recognition-postgres-data
    labels:
      - "project=face-recognition-attendance"
      - "type=database-data"
  
  # Prometheus data persistence
  prometheus-data:
    name: face-recognition-prometheus-data
    labels:
      - "project=face-recognition-attendance"
      - "type=monitoring-data"

# ====================================================================
# USAGE INSTRUCTIONS
# ====================================================================

# Basic usage:
# docker-compose up -d                    # Start all services in background
# docker-compose up face-recognition-app  # Start only the main app
# docker-compose logs -f                  # View logs
# docker-compose down                     # Stop all services
# docker-compose down -v                  # Stop and remove volumes

# Development mode:
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

# Production deployment:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

# Scale the application:
# docker-compose up -d --scale face-recognition-app=3

# View resource usage:
# docker-compose top

# Update services:
# docker-compose pull
# docker-compose up -d --no-deps face-recognition-app

# Backup data:
# docker-compose exec postgres pg_dump -U face_recognition_user face_recognition_db > backup.sql
# docker run --rm -v face-recognition-postgres-data:/data -v $(pwd):/backup alpine tar czf /backup/postgres-backup.tar.gz /data

# Environment-specific configurations:
# You can create additional compose files:
# - docker-compose.dev.yml (development overrides)
# - docker-compose.prod.yml (production overrides)
# - docker-compose.test.yml (testing overrides)