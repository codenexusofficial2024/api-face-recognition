# ====================================================================
# FACE RECOGNITION ATTENDANCE SYSTEM - DOCKER CONTAINER
# ====================================================================
# Multi-stage Docker build for face recognition attendance system
# Optimized for production deployment with camera access
# ====================================================================

# Use Python 3.9 slim as base image (good balance of features and size)
FROM python:3.9-slim

# Set working directory
WORKDIR /app

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONPATH=/app

# ====================================================================
# SYSTEM DEPENDENCIES INSTALLATION
# ====================================================================

# Update package list and install system dependencies
RUN apt-get update && apt-get install -y \
    # Build tools
    build-essential \
    cmake \
    pkg-config \
    # OpenCV dependencies
    libopencv-dev \
    python3-opencv \
    # Image processing libraries
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    # GUI libraries (for opencv display - optional)
    libgtk-3-dev \
    libatlas-base-dev \
    # Face recognition dependencies
    libboost-all-dev \
    libdlib-dev \
    # Camera and video device access
    v4l-utils \
    # Additional utilities
    wget \
    curl \
    unzip \
    # Clean up to reduce image size
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# ====================================================================
# PYTHON DEPENDENCIES INSTALLATION
# ====================================================================

# Copy requirements file first (for Docker layer caching)
COPY requirements_docker.txt /app/

# Upgrade pip and install Python packages
RUN pip install --upgrade pip setuptools wheel

# Install face recognition dependencies first (they take longest)
RUN pip install --no-cache-dir \
    numpy==1.21.6 \
    opencv-python==4.5.5.64 \
    Pillow==9.5.0

# Install dlib (this can be problematic, so we install it separately)
RUN pip install --no-cache-dir dlib==19.24.1

# Install face_recognition library
RUN pip install --no-cache-dir face-recognition==1.3.0

# Install FastAPI and web server dependencies
RUN pip install --no-cache-dir \
    fastapi==0.104.1 \
    uvicorn[standard]==0.24.0 \
    python-multipart==0.0.6 \
    python-jose[cryptography]==3.3.0 \
    passlib[bcrypt]==1.7.4

# Install remaining dependencies from requirements file
RUN pip install --no-cache-dir -r requirements_docker.txt

# ====================================================================
# APPLICATION FILES
# ====================================================================

# Create necessary directories
RUN mkdir -p /app/student-images /app/static /app/uploads /app/logs

# Copy application files
COPY app.py /app/
COPY face_recognition_module.py /app/
COPY static/ /app/static/

# Copy startup script
COPY docker-entrypoint.sh /app/
RUN chmod +x /app/docker-entrypoint.sh

# ====================================================================
# CONFIGURATION
# ====================================================================

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set permissions
RUN chown -R appuser:appuser /app
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/session-status || exit 1

# ====================================================================
# STARTUP
# ====================================================================

# Set the entrypoint
ENTRYPOINT ["/app/docker-entrypoint.sh"]

# Default command
CMD ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# ====================================================================
# DOCKER BUILD AND RUN INSTRUCTIONS
# ====================================================================

# Build the image:
# docker build -t face-recognition-attendance .

# Run with camera access (Linux):
# docker run -it --rm \
#   --device /dev/video0:/dev/video0 \
#   -p 8000:8000 \
#   -v $(pwd)/student-images:/app/student-images \
#   -v $(pwd)/attendance.json:/app/attendance.json \
#   face-recognition-attendance

# Run with camera access (macOS):
# docker run -it --rm \
#   -p 8000:8000 \
#   -v $(pwd)/student-images:/app/student-images \
#   -v $(pwd)/attendance.json:/app/attendance.json \
#   face-recognition-attendance

# Run with docker-compose:
# docker-compose up --build

# Environment variables that can be set:
# - PORT: Server port (default: 8000)
# - HOST: Server host (default: 0.0.0.0)
# - IMAGES_FOLDER: Student images folder (default: student-images)
# - ATTENDANCE_FILE: Attendance JSON file (default: attendance.json)
# - LOG_LEVEL: Logging level (default: info)

# Volume mounts recommended:
# - ./student-images:/app/student-images (for persistent student data)
# - ./attendance.json:/app/attendance.json (for persistent attendance data)
# - ./logs:/app/logs (for application logs)